#include "Vakya_Compiler.hpp"
#include "Vakya_Error.hpp"
#include "Vakya_Program.hpp"
#include <iostream>
#include <sstream>

void add_header(std::stringstream &prompt) {
  prompt << "You are given a structured instruction generated by a DSL "
            "interpreter. Follow the user's intent strictly as expressed in "
            "each section. Do not infer, add, or assume anything beyond what "
            "is explicitly stated. Follow the specified format exactly.\n";
}

void do_on(std::stringstream &prompt, Program *prgrm) {
  prompt << "============================================================\n"
         << "ACTION\n"
         << "------------------------------------------------------------\n"
         << "The user wants you to: " << prgrm->do_token->action_props + "\n"
         << "On the topic and Target entity: " + prgrm->on_token->action_props +
                "\n";
}

void add_sources(std::stringstream &prompt, Program *prgrm) {
  if (prgrm->src_token) {
    prompt << "============================================================\n"
           << "SOURCES\n"
           << "------------------------------------------------------------\n";
    prompt << "Sources to be used while performing the action, prioritized: \n";
    if (prgrm->src_token->action_props.must) {
      prompt << "These are must, priority 1 sources and should definitly be "
                "included : \n";
      prompt << prgrm->src_token->action_props.must << "\n";
    }
    if (prgrm->src_token->action_props.should) {
      prompt << "These are should, priority 2 sources and should attempted to "
                "included : \n";
      prompt << prgrm->src_token->action_props.should << "\n";
    }
    if (prgrm->src_token->action_props.could) {
      prompt << "These are must, priority 3 sources and optional to be "
                "included if possible "
                "included : \n";
      prompt << prgrm->src_token->action_props.could << "\n";
    }
  }
}

void add_conditions(std::stringstream &prompt, Program *prgrm) {
  if (prgrm->src_token) {
    prompt << "============================================================\n"
           << "CONDITIONS\n"
           << "------------------------------------------------------------\n";
    prompt << "Conditions to be used while filtering and curating the result. \n";
    if (prgrm->cdn_token->action_props.must) {
      prompt << "These are must, priority 1 conditions and should definitly be "
                "followed. More than 1 conditions can be considered AND conditions here : \n";
      prompt << prgrm->cdn_token->action_props.must << "\n";
    }
    if (prgrm->cdn_token->action_props.should) {
      prompt << "These are should, priority 2 conditions and should be tried to follow : \n";
      prompt << prgrm->src_token->action_props.should << "\n";
    }
    if (prgrm->src_token->action_props.could) {
      prompt << "These are must, priority 3 sources and optional to be "
                "included if possible "
                "included : \n";
      prompt << prgrm->src_token->action_props.could << "\n";
    }
  }
}
int main() {
  std::string code, line;
  std::cout << "Vakya (enter multiple lines, Ctrl+D to end input):\n";
  while (std::getline(std::cin, line)) {
    code += line + "\n"; // Preserve line breaks
  }

  std::stringstream prompt;
  Lexer lexer(code);
  AST ast(lexer);
  try {
    std::cout << lexer.make_tokens() << std::endl;
    ast.start_compiler();
    std::optional<Program *> prgrm = ast.get_program();
    if (prgrm.has_value()) {
      add_header(prompt);
      do_on(prompt, *prgrm);
      add_sources(prompt, *prgrm);
      std::cout << prompt.str() << std::endl;
    }
  } catch (vakya_error &ve) {
    std::cout << ve.what() << "\n";
  }
  return 0;
}
